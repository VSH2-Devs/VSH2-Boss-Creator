/*
 * vsh2_boss_creator.go
 * 
 * Copyright 2020 Nirari Technologies.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 */

package vsh2_app_window

import (
	"github.com/gotk3/gotk3/gtk"
	"log"        /// logging errors.
	"fmt"        /// for debug printing.
	"strings"    /// string manipulations.
	"os"         /// creating file.
	"io"         /// writing string into a file.
	"bufio"      /// for splitting multiline string into singular lines.
	"strconv"    /// converting string to numeric values.
)

const (
	BossMakerVersion string = "VSH2 Boss Creator v1.0a"
	TemplateDisclaimer string = `/**
 * This Boss was generated by <program>
 * Copyright Nirari Technologies - Kevin Yonan aka Nergal
 */`
	TemplateBossIncludes string = `#include <sourcemod>
#include <sdktools>
#include <sdkhooks>
#include <tf2_stocks>
#include <vsh2>

#undef REQUIRE_PLUGIN
#tryinclude <tf2attributes>
#define REQUIRE_PLUGIN`
	TemplateInfo string = `public Plugin myinfo = {
	name = "VSH2 <boss> Boss Module",
	author = "<author>",
	description = "",
	version = "1.0",
	url = ""
};`
	TemplateModel string = `#define <boss>`
	TemplateFileName string = `vsh2boss_<boss>.sp`
	TemplateGlobalVars string = `enum struct VSH2CVars {
	ConVar scout_rage_gen;
	ConVar airblast_rage;
	ConVar jarate_rage;
}

VSH2CVars g_vsh2_cvars;
`
	TemplateEntryFunc string = `public void OnLibraryAdded(const char[] name) {
	if( StrEqual(name, "VSH2") ) {
		g_vsh2_cvars.scout_rage_gen = FindConVar("vsh2_scout_rage_gen");
		g_vsh2_cvars.airblast_rage = FindConVar("vsh2_airblast_rage");
		g_vsh2_cvars.jarate_rage = FindConVar("vsh2_jarate_rage");
		g_i<boss>ID = VSH2_RegisterPlugin("<boss_short>");
		LoadVSH2Hooks();
	}
}
`
	TemplateIsBossStock string = `stock bool Is<boss>(const VSH2Player player) {
	return player.GetPropInt("iBossType") == g_i<boss>ID;
}
`
	/// future feature: have sounds and music automatically coded.
	TemplateVSH2Hooks string = `public void LoadVSH2Hooks()
{
	if( !VSH2_HookEx(OnCallDownloads, <boss>_OnCallDownloads) )
		LogError("Error loading OnCallDownloads forwards for <boss_name> module.");
	
	if( !VSH2_HookEx(OnBossMenu, <boss>_OnBossMenu) )
		LogError("Error loading OnBossMenu forwards for <boss_name> module.");
	
	if( !VSH2_HookEx(OnBossSelected, <boss>_OnBossSelected) )
		LogError("Error loading OnBossSelected forwards for <boss_name> module.");
	
	if( !VSH2_HookEx(OnBossEquipped, <boss>_OnBossEquipped) )
		LogError("Error loading OnBossEquipped forwards for <boss_name> module.");
	
	if( !VSH2_HookEx(OnMusic, <boss>_Music) )
		LogError("Error loading OnMusic forwards for <boss_name> module.");
}
`
	TemplateDownloadSounds string = `DownloadSoundList(<sound_group>, sizeof(<sound_group>));`
	TemplateDownloadMats string = `PrepareMaterial(<material>);`
	TemplateOnCallDownloads string = `public void <boss>_OnCallDownloads()
{
	PrepareModel(<boss_mdl>);
<download_sounds>
<download_materials>
}
`
	TemplateBossMenu string = `public void <boss>_OnBossMenu(Menu &menu)
{
	char tostr[10]; IntToString(g_i<boss>ID, tostr, sizeof(tostr));
	menu.AddItem(tostr, "<boss_name>");
}`
	
	TemplateBossSelected string = `public void <boss>_OnBossSelected(const VSH2Player player)
{
	if( !Is<boss>(player) )
		return;
	
	Panel panel = new Panel();
	panel.SetTitle("<boss_name>:\n<message>");
	panel.DrawItem("Exit");
	panel.Send(player.index, HintPanel, 50);
	delete panel;
}

public int HintPanel(Menu menu, MenuAction action, int param1, int param2)
{
	return;
}`
	TemplateOnBossEquip string = `public void <boss>_OnBossEquipped(const VSH2Player player)
{
	if( !Is<boss>(player) )
		return;
	
	player.SetName("<boss_name>");
	player.RemoveAllItems();
	
	/// REMEMBER TO CHANGE THE WEAPON:
	char attribs[128]; Format(attribs, sizeof(attribs), "68; 2.0; 2; 3.1; 259; 1.0; 252; 0.6; 214; %d", GetRandomInt(999, 9999));
	int wep = player.SpawnWeapon("tf_weapon_shovel", 5, 100, 5, attribs);
	SetEntPropEnt(player.index, Prop_Send, "m_hActiveWeapon", wep);
}`
	TemplateBossMusic string = `public void <boss>_Music(char song[PLATFORM_MAX_PATH], float &time, const VSH2Player player)
{
	if( !Is<boss>(player) )
		return;
	
	int theme = GetRandomInt(0, sizeof(<boss>Themes)-1);
	Format(song, sizeof(song), "%s", <boss>Themes[theme]);
	time = <boss>ThemeTimes[theme];
}`
	PathSize int = 1024
)

type VSH2BossMaker struct {
	win *gtk.Window
	boss_name, model_folder, sound_folder, skin_folder, author, model *gtk.Entry
	skins, sounds, music, boss_panel *gtk.TextView
}

func (app *VSH2BossMaker) Initialize() {
	gtk.Init(nil)
	var err error
	app.win, err = gtk.WindowNew(gtk.WINDOW_TOPLEVEL)
	if err != nil {
		log.Fatal("Unable to create window:", err)
		return
	}
	app.win.SetTitle(BossMakerVersion)
	app.win.Connect("destroy", func() {
		gtk.MainQuit()
	})
	
	box, _ := gtk.BoxNew(gtk.ORIENTATION_VERTICAL, 0)
	
	app.author = MakeEntry(box, fmt.Sprintf("Boss Author (max %d chars)", 128), 128)
	app.boss_name = MakeEntry(box, "Boss Name Here (max 64 chars)", 64)
	app.model_folder = MakeEntry(box, fmt.Sprintf("/model_folder (max %d chars)", PathSize), PathSize)
	app.sound_folder = MakeEntry(box, fmt.Sprintf("/sound_folder (max %d chars)", PathSize), PathSize)
	app.skin_folder = MakeEntry(box, fmt.Sprintf("/materials_folder (max %d chars)", PathSize), PathSize)
	app.model = MakeEntry(box, fmt.Sprintf("boss_model.mdl (max %d chars)", PathSize), PathSize)
	
	app.boss_panel = MakeTextView(box, "Boss Panel Message", "Info Message 1.\nInfo Message 2.\nInfo Message 3.")
	app.skins = MakeTextView(box, "Boss Skins/Materials", "/// skin names here (leave out .vtf and .vmt)\nskin_red\nskin_blu\nnormals")
	app.sounds = MakeTextView(box, "Boss Sounds", "/// group_name sound_file1,sound_file2,etc (must be in one line)\nIntro start1.mp3,start2.mp3,start3.mp3")
	app.music = MakeTextView(box, "Boss Music", "/// music_name float\ntheme1.mp3 60.0\ntheme2.mp3 60.0")
	
	generate_btn, _ := gtk.ButtonNewWithLabel("Generate Boss Source File")
	generate_btn.Connect("clicked", func() {
		result := app.Generate()
		var message *gtk.MessageDialog
		if result {
			message = gtk.MessageDialogNew(app.win, gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_OTHER, gtk.BUTTONS_OK, "Boss '%s' Created!", GetEntryString(app.boss_name));
		} else {
			message = gtk.MessageDialogNew(app.win, gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_OTHER, gtk.BUTTONS_OK, "Unable to create Boss '%s' (Check Boss Name)", GetEntryString(app.boss_name));
		}
		message.Run()
		message.Destroy()
	})
	box.Add(generate_btn)
	
	app.win.Add(box)
	app.win.SetDefaultSize(600, 480)
}

func MakeEntry(box *gtk.Box, placeholder string, max_len int) *gtk.Entry {
	entry, _ := gtk.EntryNew()
	entry.SetPlaceholderText(placeholder)
	entry.SetMaxLength(max_len)
	if box != nil {
		box.Add(entry)
	}
	return entry
}

func MakeTextView(box *gtk.Box, label, text string) *gtk.TextView {
	lbl, _ := gtk.LabelNew(label)
	box.Add(lbl)
	
	textview, _ := gtk.TextViewNew()
	textview.SetWrapMode(gtk.WRAP_WORD)
	
	buffer, _ := textview.GetBuffer()
	buffer.SetText(text)
	box.Add(textview)
	return textview
}

func GetEntryString(entry *gtk.Entry) string {
	entry_buffer, _ := entry.GetBuffer()
	str, _ := entry_buffer.GetText()
	return str
}

func GetTextViewString(tv *gtk.TextView) string {
	tv_buffer, _ := tv.GetBuffer()
	tv_start_iter := tv_buffer.GetStartIter()
	tv_end_iter := tv_buffer.GetEndIter()
	str, _ := tv_buffer.GetText(tv_start_iter, tv_end_iter, true)
	return str
}

func ParseMaterials(tv *gtk.TextView) []string {
	strs := make([]string, 0)
	scanner := bufio.NewScanner(strings.NewReader(GetTextViewString(tv)))
	for scanner.Scan() {
		/// further split the line.
		line := scanner.Text()
		if strings.HasPrefix(line, "//") || len(line)==0 {
			continue
		}
		strs = append(strs, line)
	}
	return strs
}

/// returns an array of maps of strings
type SoundGroup    map[string][]string
func ParseSounds(tv *gtk.TextView) []SoundGroup {
	/// Get the full, unedited string.
	total_str := GetTextViewString(tv)
	sound_groups := make([]SoundGroup, 1)
	
	/// split it line by line.
	scanner := bufio.NewScanner(strings.NewReader(total_str))
	for scanner.Scan() {
		/// further split the line.
		line := scanner.Text()
		if strings.HasPrefix(line, "//") || len(line)==0 {
			continue
		}
		line = strings.Replace(line, ",", " ", -1)
		line = strings.Replace(line, "  ", " ", -1)
		group := strings.Split(line, " ")
		sound_group := make(SoundGroup, 1)
		sound_group[group[0]] = group[1:]
		sound_groups = append(sound_groups, sound_group)
	}
	return sound_groups
}

func ParseMusic(tv *gtk.TextView) map[string]float32 {
	songs := make(map[string]float32, 1)
	total_str := GetTextViewString(tv)
	
	scanner := bufio.NewScanner(strings.NewReader(total_str))
	for scanner.Scan() {
		/// further split the line.
		line := scanner.Text()
		if strings.HasPrefix(line, "//") || len(line)==0 {
			continue
		}
		
		line = strings.Replace(line, ",", " ", -1)
		line = strings.Replace(line, "  ", " ", -1)
		group := strings.Split(line, " ")
		flt, _ := strconv.ParseFloat(group[1], 32)
		songs[group[0]] = float32(flt)
	}
	return songs
}

func (app *VSH2BossMaker) Generate() bool {
	boss_name := GetEntryString(app.boss_name)
	if len(boss_name)==0 {
		return false
	}
	/// Assume boss name is: "The Punisher"
	boss_short_name := strings.ToLower(boss_name)
	
	/// short name -> the_punisher
	boss_short_name = strings.Replace(boss_short_name, " ", "_", -1)
	/// tall name -> ThePunisher
	boss_tall_name := strings.Replace(boss_name, " ", "", -1)
	source_file := strings.Replace(TemplateDisclaimer, "<program>", BossMakerVersion, -1)
	source_file += "\n\n" + TemplateBossIncludes
	source_file += "\n\n"
	
	/// model define
	model_name := boss_tall_name + "Model"
	source_file += strings.Replace(TemplateModel, "<boss>", model_name, -1) + "    " + "\"" + GetEntryString(app.model_folder) + "/" + GetEntryString(app.model) + "\""
	source_file += "\n\n"
	
	/// info shit.
	author_name := GetEntryString(app.author)
	info := strings.Replace(TemplateInfo, "<boss>", boss_name, -1)
	info = strings.Replace(info, "<author>", author_name, -1)
	source_file += info
	source_file += "\n\n"
	
	/// make boss id int.
	boss_id := fmt.Sprintf("int g_i%sID;", boss_tall_name)
	source_file += boss_id
	
	/// parse the sounds.
	source_file += "\n\n"
	sound_folder := GetEntryString(app.sound_folder)
	for _, sound_groups := range ParseSounds(app.sounds) {
		for key, sounds := range sound_groups {
			source_file += "char " + boss_tall_name + key + "[][] = {\n"
			for _, sound := range sounds {
				if len(sound)==0 {
					continue
				}
				source_file += "\t"
				source_file += "\"" + sound_folder + "/" + sound + "\",\n"
			}
			source_file += "}\n\n"
		}
	}
	
	/// parse music.
	source_file += "char " + boss_tall_name + "Themes[][] = {\n"
	music_map := ParseMusic(app.music)
	for song, _ := range music_map {
		source_file += "\t"
		source_file += "\"" + sound_folder + "/" + song + "\",\n"
	}
	source_file += "}\n\n"
	
	source_file += "float " + boss_tall_name + "ThemeTimes[][] = {\n"
	for _, time := range music_map {
		source_file += "\t"
		source_file += fmt.Sprintf("%f", time) + ",\n"
	}
	source_file += "}\n\n"
	
	/// set up global vars.
	source_file += TemplateGlobalVars
	source_file += "\n\n"
	
	/// setup on library loading.
	boss_setup_code := strings.Replace(TemplateEntryFunc, "<boss>", boss_tall_name, -1)
	boss_setup_code = strings.Replace(boss_setup_code, "<boss_short>", boss_short_name, -1)
	source_file += boss_setup_code
	
	/// make boss identity stock.
	source_file += "\n"
	source_file += strings.Replace(TemplateIsBossStock, "<boss>", boss_tall_name, -1)
	
	source_file += "\n\n"
	
	vsh2hooks_func := strings.Replace(TemplateVSH2Hooks, "<boss>", boss_tall_name, -1)
	vsh2hooks_func = strings.Replace(vsh2hooks_func, "<boss_name>", boss_name, -1)
	
	source_file += vsh2hooks_func
	source_file += "\n\n"
	
	/// make downloads list.
	oncalldls := strings.Replace(TemplateOnCallDownloads, "<boss>", boss_tall_name, -1)
	oncalldls = strings.Replace(oncalldls, "<boss_mdl>", model_name, -1)
	download_sounds := ""
	for _, sound_groups := range ParseSounds(app.sounds) {
		for key, _ := range sound_groups {
			sound_name := boss_tall_name + key
			download_sounds += "\tDownloadSoundList(" + sound_name + ", sizeof(" + sound_name + "));\n"
		}
	}
	if len(music_map) > 0 {
		download_sounds += "\tDownloadSoundList(" + boss_tall_name + "Themes" + ", sizeof(" + boss_tall_name + "Themes" + "));\n"
	}
	
	oncalldls = strings.Replace(oncalldls, "<download_sounds>", download_sounds, -1)
	download_skins := ""
	for _, mat := range ParseMaterials(app.skins) {
		download_skins += "\tPrepareMaterial(\"materials/models/" + GetEntryString(app.skin_folder) + "/" + mat + "\");\n"
	}
	oncalldls = strings.Replace(oncalldls, "<download_materials>", download_skins, -1)
	source_file += oncalldls
	source_file += "\n\n"
	{
		boss_menu := strings.Replace(TemplateBossMenu, "<boss>", boss_tall_name, -1)
		boss_menu = strings.Replace(boss_menu, "<boss_name>", boss_name, -1)
		source_file += boss_menu
	}
	source_file += "\n\n"
	
	/// make OnBossSelected & panel message.
	on_boss_selected := strings.Replace(TemplateBossSelected, "<boss>", boss_tall_name, -1)
	on_boss_selected = strings.Replace(on_boss_selected, "<boss_name>", boss_name, -1)
	rawify := GetTextViewString(app.boss_panel)
	rawify = strings.Replace(rawify, "\n", `\n`, -1)
	on_boss_selected = strings.Replace(on_boss_selected, "<message>", rawify, -1)
	
	source_file += on_boss_selected
	source_file += "\n\n"
	
	on_boss_equip := strings.Replace(TemplateOnBossEquip, "<boss>", boss_tall_name, -1)
	on_boss_equip = strings.Replace(on_boss_equip, "<boss_name>", boss_name, -1)
	source_file += on_boss_equip
	source_file += "\n\n"
	
	source_file += strings.Replace(TemplateBossMusic, "<boss>", boss_tall_name, -1)
	source_file += "\n\n\n"
	
	WriteToFile(strings.Replace(TemplateFileName, "<boss>", boss_short_name, -1), source_file)
	return true
}

func (app *VSH2BossMaker) ShowAll() {
	app.win.ShowAll()
}

func WriteToFile(filename, data string) error {
	file, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer file.Close()
	
	_, err = io.WriteString(file, data)
	if err != nil {
		return err
	}
	return file.Sync()
}
